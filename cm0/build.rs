#![doc = r" Builder file for Peripheral access crate generated by svd2rust tool"]
use std::env;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

struct MemMapSection {
    name: &'static str,
    origin: u32,
    length: &'static str,
}

impl std::fmt::Display for MemMapSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "\x20    {} : ORIGIN = {:#010x}, LENGTH = {}",
            self.name, self.origin, self.length
        )
    }
}

struct MemMap<const N: usize> {
    sections: [MemMapSection; N],
}

impl<const N: usize> std::fmt::Display for MemMap<N> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "MEMORY")?;
        writeln!(f, "{{")?;
        for section in self.sections.iter() {
            writeln!(f, "\x20     {}", section)?;
        }
        writeln!(f, "}}")
    }
}

const CORE0_MEMMAP: MemMap<2> = MemMap {
    sections: [
        MemMapSection{name: "FLASH", origin: 0x10000000, length: "8128K"},
        MemMapSection{name: "RAM"  , origin: 0x28000800, length: "1022K"},
    ]
};

const CORE1_MEMMAP: MemMap<2> = MemMap {
    sections: [
        MemMapSection{name: "FLASH", origin: 0x10000000, length: "8128K"},
        MemMapSection{name: "RAM"  , origin: 0x38000800, length: "1022K"},
    ]
};

fn main() {
    let (memmap, out_path) = if cfg!(feature = "core0") {
        println!("cargo::rustc-cfg=CORE=\"0\"");
        (CORE0_MEMMAP, "core0")
    } else {
        println!("cargo::rustc-cfg=CORE=\"1\"");
        (CORE1_MEMMAP, "core1")
    };

    let out = &PathBuf::from(env::var_os("OUT_DIR").unwrap());
    let out = out.join(out_path);
    let _ = std::fs::create_dir(out.clone());
    File::create(out.join("memory.x"))
        .unwrap()
        .write_fmt(format_args!("{}", memmap))
        .unwrap();
    println!("cargo:rustc-link-search={}", out.display());

    println!("cargo:rerun-if-changed=memory.x");
}
